IntensityEquivalence <- as.numeric(c7Amp$meanTmr/b6Amp$meanCy)
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
}
ratioforConversion <- 0.3
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
plot(scatter3colorChange)
Amplitudes
IntensityEquivalence
#######Convert 3-ColorSpots
Amplitudes <- dataTable %>% group_by(labels) %>% summarize(meanCy = mean(cy_amplitude), meanTmr = mean(tmr_amplitude))
#Check if Regular or Color Swap
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
}
ratioforConversion <- 0.3
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
plot(scatter3colorChange)
totals3color <- byCellCounts %>% group_by(labels) %>% summarize(totalCount = sum(rnaCount))
totals3color$name <- as.factor(dataSelect)
totals3color <- totals %>% mutate(totalFrac = totalCount/sum(totalCount))
temp <- byCellCounts %>% group_by(cellID) %>% mutate (RNAtot = sum(rnaCount))
temp$rnaFrac <- NULL
temp <- left_join(temp, byCellCounts_onlyDetec)
temp <- filter(temp, labels == "C7")
p <- ggplot(data = temp) +
geom_point(aes(x = rnaFrac, y = RNAtot)) +
xlim(c(0,1))
plot(p)
p <- ggplot(data = temp) +
geom_histogram(aes(x = rnaFrac)) +
xlim(c(0,1))
plot(p)
# library(hexbin)
#
# test <- test %>% filter(labels == "3-color")
# ggplot(test, aes(x = tmr_amplitude, y = cy_amplitude)) + geom_point()
# hexbinplot(cy_amplitude ~ tmr_amplitude, data = test, trans=log, inv=exp)
# plot(test)
# plot(h, colramp=rf)
#
#
# temp <- dataTable %>% filter(cy_amplitude < 0.05)
# ggplot(filter(temp,  labels == "C7"), aes(x = cy_amplitude)) + geom_histogram(binwidth = 0.00001)
#
# test
# sum(spots > 50)
plot(scatter3colorChange)
plot(p)
plot(p)
p1 <- ggplot(data = temp) +
geom_point(aes(x = rnaFrac, y = RNAtot)) +
xlim(c(0,1))
plot(p1)
p <- ggplot(data = temp) +
geom_histogram(aes(x = rnaFrac)) +
xlim(c(0,1))
plot(p)
temp
sum(temp$rnaFrac > 0.8)
sum(temp$RNAtot < 50)
sum(temp$RNAtot < 100)
byCellCounts_onlyDetec
byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(totals = sum(rnaCount))
byCellCounts_onlyDetec %>% group_by(cellID, labels) %>% mutate(totals = sum(rnaCount))
byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(totals = sum(rnaCount))
test <- byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(totals = sum(rnaCount))
sum(test$totals > 50)
sum(test$totals < 50)
15/73
getwd
getwd()
#Runs processing of Extracted Data and fits 3colorSpots
datadir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Raw Data/"
dataSelect <- "Data_CxB_MEF_WT_Control"
pixelShift <- FALSE
outdir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Plots/"
setwd("/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Scripts/")
byCellCounts <- processExtractedData_andFit3colorSpots(datadir, dataSelect, pixelShift, outdir)
datadir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Raw Data/"
dataSelect <- "Data_CxB_MEF_WT_Control"
pixelShift <- FALSE
outdir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Plots/"
byCellCounts <- processExtractedData_andFit3colorSpots(datadir, dataSelect, pixelShift, outdir)
#Runs processing of Extracted Data and fits 3colorSpots
setwd("/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Scripts/")
source("/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Scripts/Functions/processExtractedData_andFit3colorSpots.R")
datadir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Raw Data/"
dataSelect <- "Data_CxB_MEF_WT_Control"
pixelShift <- FALSE
outdir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Plots/"
byCellCounts <- processExtractedData_andFit3colorSpots(datadir, dataSelect, pixelShift, outdir)
byCellCounts
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels <- revalue(dataTable$labels, c("B6"="B6", "H19 CAST"="C7"))
datadir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Raw Data/"
dataSelect <- "Data_CxB_MEF_WT_Control"
pixelShift <- FALSE
outdir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Plots/"
minDetectedH19 <- 50
ataSelectdir <- paste(datadir, dataSelect, sep ="")
outSelectdir <- paste(outdir, dataSelect, "/", sep ="")
yamldir <- paste(dataSelectdir, "/readMe.yaml", sep = "")
expData <- yaml.load_file(yamldir)
if (!pixelShift) {
csv <- '_MasterGuideSpotsTable.csv'
graphName <- dataSelect
}else {
csv <- '_MasterGuideSpotsTable_Shifted.csv'
graphName <- paste(dataSelect, "_Shifted", sep = "")
}
tabletoRead <- paste(datadir, expData$name, csv, sep = "")
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels
levels(dataTable$labels)
temp <- revalue(dataTable$labels, c("B6"="B6", "H19 CAST"="C7"))
levels(temp$labels)
dataTable$labels <- revalue(dataTable$labels, c("B6"="B6", "H19 CAST"="C7"))
levels(temp$labels)
levels(temp$labels)
levels(dataTable$labels)
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels <- revalue(dataTable$labels, c("H19 B6"="B6", "H19 CAST"="C7", "H19 C7" = "C7", "B6 H19 SNPs"="B6",
"C7 H19 SNPs"="C7", "CAST" = "C7"))
dataTable$labels <- factor(dataTable$labels,  c("B6", "C7", "undetec", "3-color"))
byCellCounts <- dataTable %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts <- byCellCounts %>%
group_by(cellID) %>%
mutate(rnaFrac = rnaCount/sum(rnaCount))
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
byCellCounts_onlyDetec
byCell_detecTotal <- byCellCounts_onlyDetec %>% group_by(labels) %>% summarize(detecTotal =  sum(rnaCount))
byCell_detecTotal
byCell_detecTotal <- byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(detecTotal =  sum(rnaCount))
byCell_detecTotal
tokeep <- filter(byCell_detecTotal, detecTotal > minDetecH19)
minDetecH19 <- 50
tokeep <- filter(byCell_detecTotal, detecTotal > minDetecH19)
tokeep
temp <- filter(dataTable, cellID == is.element(cellID, toKeep$cellID))
tokeep <- filter(byCell_detecTotal, detecTotal > minDetecH19)
temp <- filter(dataTable, cellID == is.element(cellID, tokeep$cellID))
temp
temp$cellID
tokeep$cellID
tokeep
range(dataTable$cellID)
temp <- filter(dataTable, cellID %in% toRemove$cellID)
toRemove <- filter(byCell_detecTotal, detecTotal <= minDetecH19)
temp <- filter(dataTable, cellID %in% toRemove$cellID)
temp
dataTable
temp <- filter(dataTable, cellID %in% tokeep$cellID)
temp
tokeep <- filter(byCell_detecTotal, detecTotal >= minDetecH19)
temp <- filter(dataTable, cellID %in% tokeep$cellID)
Amplitudes <- dataTable %>% group_by(labels) %>% summarize(meanCy = mean(cy_amplitude), meanTmr = mean(tmr_amplitude))
ratioforConversion <- 0.3
expData
#Check if Regular or Color Swap
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
}
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
plot(scatter3colorChange)
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
theme(panel.background = element_blank())
plot(scatter3colorChange)
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
if(CS){
+ annotate("text", x= 0.2, y=0.2, "ColorSwap")
} else{
+ annotate("text", x= 0.2, y=0.2, "Regular")
}
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
CS <- TRUE
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
CS <- FALSE
}
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
if(CS){
+ annotate("text", x= 0.2, y=0.2, "ColorSwap")
} else{
+ annotate("text", x= 0.2, y=0.2, "Regular")
}
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
if(CS){
+ annotate("text", x= 0.05, y=0.05, label = "ColorSwap")
} else{
+ annotate("text", x= 0.05, y=0.05, label ="Regular")
}
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
CS
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
if (CS) {
scatter3colorChange <- scatter3colorChange + annotate("text", x= 0.05, y=0.05, label = "ColorSwap")
} else{
scatter3colorChange <- + scatter3colorChange annotate("text", x= 0.05, y=0.05, label ="Regular")
}
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed()
if (CS) {
scatter3colorChange <- scatter3colorChange + annotate("text", x= 0.05, y=0.05, label = "ColorSwap")
} else{
scatter3colorChange <- scatter3colorChange + annotate("text", x= 0.05, y=0.05, label ="Regular")
}
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
title <- expData$name
title
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
ggtitle(expData$name)
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
ggtitle(expData$name)
#  theme(panel.background = element_blank())
plot(scatter3colorChange)
currdir <- getwd()
setwd(outSelectdir)
ggsave(plot = scatter3colorChange, filename =   paste(graphName,"3colorChangeScatter.pdf", sep = "_"))
setwd(currdir)
dataTable3Color
temp <- left_join(dataTable3Color, dataTable)
temp
temp %>% filter(labels == "B6")
temp <- left_join(dataTable, dataTable3Color)
temp
temp$toTmr
dataTable <- left_join(dataTable, dataTable3Color)
dataTable <- left_join(dataTable, dataTable3Color)
if (CS) {
dataTable <- dataTable %>% mutate(labels = ifelse(toTmr, "C7", labels)) %>% mutate(labels = ifelse(toCy, "B6", labels))
} else {
dataTable <- dataTable %>% mutate(labels = ifelse(toTmr, "B6", labels)) %>% mutate(labels = ifelse(toCy, "C7", labels))
}
dataTable
sum(dataTable$toTmr)
dataTable
tabletoRead <- paste(datadir, expData$name, csv, sep = "")
#Read table and standardize labels
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels <- revalue(dataTable$labels, c("H19 B6"="B6", "H19 CAST"="C7", "H19 C7" = "C7", "B6 H19 SNPs"="B6",
"C7 H19 SNPs"="C7", "CAST" = "C7"))
dataTable$labels <- factor(dataTable$labels,  c("B6", "C7", "undetec", "3-color"))
#Filter cells that do not have sufficient expression
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
byCell_detecTotal <- byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(detecTotal =  sum(rnaCount))
tokeep <- filter(byCell_detecTotal, detecTotal >= minDetecH19)
dataTable <- filter(dataTable, cellID %in% tokeep$cellID)
#Perform 3-Color Spot Fitting
#######Convert 3-ColorSpots
Amplitudes <- dataTable %>% group_by(labels) %>% summarize(meanCy = mean(cy_amplitude), meanTmr = mean(tmr_amplitude))
#Check if Regular or Color Swap
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
CS <- TRUE
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
CS <- FALSE
}
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
ggtitle(expData$name)
currdir <- getwd()
setwd(outSelectdir)
ggsave(plot = scatter3colorChange, filename =   paste(graphName,"3colorChangeScatter.pdf", sep = "_"))
setwd(currdir)
dataTable <- left_join(dataTable, dataTable3Color)
dataTable[is.na] <- 0
if (CS) {
dataTable <- dataTable %>% mutate(labels = ifelse(toTmr, "C7", labels)) %>% mutate(labels = ifelse(toCy, "B6", labels))
} else {
dataTable <- dataTable %>% mutate(labels = ifelse(toTmr, "B6", labels)) %>% mutate(labels = ifelse(toCy, "C7", labels))
}
#Runs processing of Extracted Data and fits 3colorSpots
setwd("/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Scripts/")
source("/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Scripts/Functions/processExtractedData_andFit3colorSpots.R")
datadir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Raw Data/"
dataSelect <- "Data_CxB_MEF_WT_Control"
pixelShift <- FALSE
outdir <- "/Users/paulginart/Dropbox/H19 SNP-FISH Paper/Processed Data/"
minDetecH19 <- 50
ratioforConversion <- 0.3
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(yaml)
library(reshape2)
dataSelectdir <- paste(datadir, dataSelect, sep ="")
outSelectdir <- paste(outdir, dataSelect, "/", sep ="")
yamldir <- paste(dataSelectdir, "/readMe.yaml", sep = "")
expData <- yaml.load_file(yamldir)
if (!pixelShift) {
csv <- '_MasterGuideSpotsTable.csv'
graphName <- dataSelect
}else {
csv <- '_MasterGuideSpotsTable_Shifted.csv'
graphName <- paste(dataSelect, "_Shifted", sep = "")
}
tabletoRead <- paste(datadir, expData$name, csv, sep = "")
#Read table and standardize labels
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels <- revalue(dataTable$labels, c("H19 B6"="B6", "H19 CAST"="C7", "H19 C7" = "C7", "B6 H19 SNPs"="B6",
"C7 H19 SNPs"="C7", "CAST" = "C7"))
dataTable$labels <- factor(dataTable$labels,  c("B6", "C7", "undetec", "3-color"))
#Filter cells that do not have sufficient expression
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
byCell_detecTotal <- byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(detecTotal =  sum(rnaCount))
tokeep <- filter(byCell_detecTotal, detecTotal >= minDetecH19)
dataTable <- filter(dataTable, cellID %in% tokeep$cellID)
#Perform 3-Color Spot Fitting
#######Convert 3-ColorSpots
Amplitudes <- dataTable %>% group_by(labels) %>% summarize(meanCy = mean(cy_amplitude), meanTmr = mean(tmr_amplitude))
#Check if Regular or Color Swap
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
CS <- TRUE
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
CS <- FALSE
}
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
ggtitle(expData$name)
currdir <- getwd()
setwd(outSelectdir)
ggsave(plot = scatter3colorChange, filename =   paste(graphName,"3colorChangeScatter.pdf", sep = "_"))
setwd(currdir)
dataTable
dataTabel3
dataTable3Color
dataTable3Color
dataTable3Color %>% group_by(cellID) %>% summarize(changeLabels = n(), labels = n())
dataTable3Color %>% group_by(cellID, labels) %>% summarize(changeLabels = n(), labels = n())
dataTable3Color %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
dataTable3Color %>% group_by(cellID, changeLabels) %>% summarize(rnaCount = n())
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(yaml)
library(reshape2)
dataSelectdir <- paste(datadir, dataSelect, sep ="")
outSelectdir <- paste(outdir, dataSelect, "/", sep ="")
yamldir <- paste(dataSelectdir, "/readMe.yaml", sep = "")
expData <- yaml.load_file(yamldir)
if (!pixelShift) {
csv <- '_MasterGuideSpotsTable.csv'
graphName <- dataSelect
}else {
csv <- '_MasterGuideSpotsTable_Shifted.csv'
graphName <- paste(dataSelect, "_Shifted", sep = "")
}
tabletoRead <- paste(datadir, expData$name, csv, sep = "")
#Read table and standardize labels
dataTable <- tbl_df(read.csv(tabletoRead , stringsAsFactors = T))
dataTable$labels <- revalue(dataTable$labels, c("H19 B6"="B6", "H19 CAST"="C7", "H19 C7" = "C7", "B6 H19 SNPs"="B6",
"C7 H19 SNPs"="C7", "CAST" = "C7"))
dataTable$labels <- factor(dataTable$labels,  c("B6", "C7", "undetec", "3-color"))
#Filter cells that do not have sufficient expression
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
byCell_detecTotal <- byCellCounts_onlyDetec %>% group_by(cellID) %>% summarize(detecTotal =  sum(rnaCount))
tokeep <- filter(byCell_detecTotal, detecTotal >= minDetecH19)
dataTable <- filter(dataTable, cellID %in% tokeep$cellID)
#Perform 3-Color Spot Fitting
#######Convert 3-ColorSpots
Amplitudes <- dataTable %>% group_by(labels) %>% summarize(meanCy = mean(cy_amplitude), meanTmr = mean(tmr_amplitude))
#Check if Regular or Color Swap
c7Amp <- Amplitudes %>% filter(labels == "C7")
b6Amp <- Amplitudes %>% filter(labels == "B6")
if (c7Amp$meanCy == 0 ){
IntensityEquivalence <- as.numeric(b6Amp$meanCy/c7Amp$meanTmr)
CS <- TRUE
} else {
IntensityEquivalence <- as.numeric(c7Amp$meanCy/b6Amp$meanTmr)
CS <- FALSE
}
dataTable3Color <- filter(dataTable, labels == "3-color") %>%
mutate(scaledTMR_amplitude = IntensityEquivalence * tmr_amplitude ) %>%
mutate(toTmr = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) < ratioforConversion) %>%
mutate(toCy = cy_amplitude/(scaledTMR_amplitude + cy_amplitude) > 1-ratioforConversion) %>%
mutate(changeLabels = "3-Color") %>%
mutate(changeLabels = ifelse(toTmr, "toTmr", changeLabels)) %>%
mutate(changeLabels = ifelse(toCy, "toCy", changeLabels))
scatter3colorChange <- ggplot(data = dataTable3Color) +
geom_point(aes(x = tmr_amplitude, y = cy_amplitude, colour = changeLabels)) +
coord_fixed() +
ggtitle(expData$name)
currdir <- getwd()
setwd(outSelectdir)
ggsave(plot = scatter3colorChange, filename =   paste(graphName,"3colorChangeScatter.pdf", sep = "_"))
setwd(currdir)
temp <- left_join(dataTable, dataTable3Color)
temp[is.Na]
temp[is.na]
is.na(temp)
dataTable
byCellCounts <- dataTable %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
C7Counts <- byCellCounts %>% filter(labels == "C7") %>% mutate(rnaCount = -rnaCount)
B6Counts <- byCellCounts %>% filter(labels == "B6")
byCellCounts <- byCellCounts %>%
group_by(cellID) %>%
mutate(rnaFrac = rnaCount/sum(rnaCount))
totals <- byCellCounts %>% group_by(labels) %>% summarize(totalCount = sum(rnaCount))
totals$name <- as.factor(dataSelect)
totals <- totals %>% mutate(totalFrac = totalCount/sum(totalCount))
byCellCounts
widebyCellCounts_onlyDetec <-  byCellCounts_onlyDetec %>%
unite(prod, rnaCount, rnaFrac) %>%
spread(labels, prod) %>%
separate(B6, c("B6RNACount", "B6Frac"), sep = "_") %>%
separate(C7, c("C7RNACount", "C7Frac"), sep = "_")
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
widebyCellCounts_onlyDetec <-  byCellCounts_onlyDetec %>%
unite(prod, rnaCount, rnaFrac) %>%
spread(labels, prod) %>%
separate(B6, c("B6RNACount", "B6Frac"), sep = "_") %>%
separate(C7, c("C7RNACount", "C7Frac"), sep = "_")
byCellCounts_onlyDetec <- dataTable %>% filter(is.element(labels,c("B6","C7"))) %>% group_by(cellID, labels) %>% summarize(rnaCount = n())
byCellCounts_onlyDetec <- byCellCounts_onlyDetec %>% group_by(cellID) %>% mutate(rnaFrac = rnaCount/sum(rnaCount))
byCellCounts
byCellCounts_onlyDetec
byCellCounts_onlyDetec
byCellCounts_onlyDetec
